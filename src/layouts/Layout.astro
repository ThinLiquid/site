---
import { execSync } from 'child_process'
import RootLayout from './RootLayout.astro';
import { Icon } from 'astro-icon/components';

interface Props {
	title?: string
	description?: string
	hue: number
}

const { title, description, hue } = Astro.props

const getGitInfo = () => {
  try {
    const exec = (cmd: string) => execSync(cmd).toString().trim();
    return {
      commitHash: exec(`git rev-parse HEAD`),
      commitBranch: exec(`git rev-parse --abbrev-ref HEAD`),
      commitMessage: exec(`git log -1 --pretty=%B`),
      commitDate: exec(`git log -1 --pretty=%cd`)
    };
  } catch (error) {
    console.error("Error getting Git info:");
    console.error(error);
    return { commitHash: "", commitMessage: "", commitBranch: "", commitDate: "" };
  }
};

const commit = getGitInfo() // fein
---
<RootLayout title={title} description={description} hue={hue}>
	<div style={{
		position: 'relative',
		zIndex: 10,
		margin: '0 auto',
    maxWidth: '500px',
    width: '100%',
    padding: '0 16px',
		display: 'flex',
    flexDirection: 'column',
    gap: '8px'
	}}>
		<div style={{ display: 'flex', gap: '8px', alignItems: 'center', margin: '16px 0' }}>
			<img src="/icon.png" style={{ height: '1.5rem', width: 'auto', aspectRatio: '1/1', userSelect: 'none', filter: `hue-rotate(${hue + 180}deg)` }} draggable="false">
			<h2 style={{ display: 'inline-block', margin: 0 }}>thinliquid's [studio]</h2>
		</div>
		<slot/>
	</div>

	<div class="blur" />

	<div style={{
		position: 'absolute',
		right: '8px',
		bottom: '8px'
	}} class="meta">
		<Icon name="pixelarticons:git-branch" /> <a href={`https://github.com/ThinLiquid/site/commits/${commit.commitHash}`}>{commit.commitHash.slice(0,7)}</a>
	</div>
</RootLayout>

<style lang="scss">
	.meta {
		opacity: 0.25;
		transition: .4s opacity;
		user-select: none;

		&:hover {
			opacity: 0.5;
		}
	}

	.blur {
		position: absolute;
		background: var(--color-primary);
		width: 75vw;
		height: 50vh;
		filter: blur(50px);
		opacity: 0.1;
		border-radius: 50%;
		top: -25vh;
		left: 50%;
		transform: translateX(-50%);
		z-index: 0;

		animation: modulate 10s infinite;
	}

	@keyframes modulate {
		0% { filter: blur(50px); }
		50% { filter: blur(100px); transform: translateX(-50%) scale3d(1.2, 2, 1.1); }
		100% { filter: blur(50px); }
	}
</style>