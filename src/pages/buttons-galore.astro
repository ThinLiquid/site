---
import Layout from "../layouts/Layout.astro";
---

<Layout title="buttons galore">
  <h1>buttons galore!</h1>
  my personal collection of 88x31 buttons (that you can contribute to), all in one place!
  <a href="https://github.com/ThinLiquid/buttons">github repo</a>

  <div class="tooltip" style={{ position: 'absolute', background: 'var(--base)', zIndex: 69696969, padding: '5px', border: '2px dashed var(--surface0)', borderRadius: '5px' }}></div>

  <input type="text" id="search" placeholder="search for a button..." style={{ width: '100%' }} />

  <div style={{ display: 'flex' }}>
    <label for="categories"></label>
    <select id="categories" style={{ flex: 1 }}>
      <option>All Categories</option>
    </select>
    <label for="sort"></label>
    <select id="sort" style={{ flex: 1 }}>
      <option value="alphabetical">Alphabetical</option>
      <option value="alphabetical-reverse">Alphabetical (Reverse)</option>
      <option value="order">Order</option>
      <option value="order-reverse">Order (Reverse)</option>
      <option value="random">Random</option>
    </select>
    <label for="creators"></label>
    <select id="creators" style={{ flex: 1 }}>
      <option>All Creators</option>
    </select>
  </div>

  <div class="buttons"></div>
</Layout>

<style>
  .dimmed::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    pointer-events: none;
  }

  .buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-top: 10px;
    justify-content: center;
    position: relative;
  }

  .button-img {
    width: 88px;
    height: 31px;
    position: relative;
    transition: opacity 0.2s;
  }
</style>

<script>
  const BUTTON_FILE = 'https://raw.githubusercontent.com/ThinLiquid/buttons/main/index.buttonfile';
  const BUTTON_DIRECTORY = 'https://raw.githubusercontent.com/ThinLiquid/buttons/main/img/';

  // Select elements with type safety
  const search = document.querySelector<HTMLInputElement>('#search');
  const categoriesSelect = document.querySelector<HTMLSelectElement>('#categoriesSelect');
  const creatorsSelect = document.querySelector<HTMLSelectElement>('#creatorsSelect');
  const buttonsContainer = document.querySelector<HTMLDivElement>('.buttons');
  const tooltip = document.querySelector<HTMLDivElement>('.tooltip');

  // Check for null elements to avoid TypeScript errors
  if (!search || !categoriesSelect || !creatorsSelect || !buttonsContainer) {
    console.error('One or more elements could not be found.');
  }

  const showTooltip = (button: any) => {
    if (!tooltip) return;
    tooltip.innerHTML = button.description;
    tooltip.style.opacity = '1';
    tooltip.style.position = 'absolute';
    tooltip.style.left = `${button.clientX + 10}px`;
    tooltip.style.top = `${button.clientY + 10}px`;
  };

  const hideTooltip = () => {
    if (tooltip) tooltip.style.opacity = '0';
  };

  const fetchButtons = async () => {
    const res = await fetch(`${BUTTON_FILE}`, { cache: 'no-store' });
    const data = await res.text();
    const entries = data.split('\n').map((entry, index) => {
      const [categories, tags, filename, description, creator] = entry.split(' | ');
      try {
        return {
          categories: categories?.split(',') || [],
          tags: tags?.split(' ') || [],
          filename,
          description,
          creator: creator || 'N/A'
        };
      } catch {
        console.error('Error: malformed content\n ->', JSON.stringify(entry), 'at line', index);
        return null;
      }
    }).filter(entry => entry !== null);

    return entries;
  };

  const renderButtons = (buttons: any[]) => {
    if (!buttonsContainer) return;
    buttonsContainer.innerHTML = '';

    buttons.forEach(button => {
      const buttonElement = document.createElement('img');
      buttonElement.src = `${BUTTON_DIRECTORY}${button.filename}`;
      buttonElement.alt = button.description;
      buttonElement.classList.add('button-img');
      buttonElement.dataset.categories = button.categories.join(',');
      buttonElement.dataset.tags = button.tags.join(' ');
      buttonElement.dataset.creator = button.creator;
      buttonElement.dataset.description = button.description.toLowerCase();

      // Add tooltip events if needed
      buttonElement.addEventListener('mouseover', () => showTooltip(button));
      buttonElement.addEventListener('mouseout', hideTooltip);

      buttonsContainer.appendChild(buttonElement);
    });
  };

  const applyFilter = () => {
    if (!search || !categoriesSelect || !creatorsSelect) return;
    const searchValue = search.value.toLowerCase();
    const category = categoriesSelect.value;
    const creator = creatorsSelect.value;

    document.querySelectorAll<HTMLImageElement>('.button-img').forEach(button => {
      const buttonCategories = button.dataset.categories?.split(',') || [];
      const buttonTags = button.dataset.tags?.split(' ') || [];
      const buttonDescription = button.dataset.description || '';
      const buttonCreator = button.dataset.creator || '';

      const matches =
        (category === 'All Categories' || buttonCategories.includes(category)) &&
        (creator === 'All Creators' || buttonCreator === creator) &&
        (buttonDescription.includes(searchValue) || buttonTags.includes(searchValue));

      button.classList.toggle('dimmed', !matches);
    });
  };

  const init = async () => {
    const buttons = await fetchButtons();
    renderButtons(buttons);

    if (search) search.addEventListener('input', applyFilter);
    if (categoriesSelect) categoriesSelect.addEventListener('change', applyFilter);
    if (creatorsSelect) creatorsSelect.addEventListener('change', applyFilter);
  };

  init();
</script>
<style>
  .hidden {
    display: none;
  }
</style>
<style>
  .buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0px;
    margin-top: 10px;
    justify-content: center;

    img {
      transition: scale .2s var(--bounce), rotate .2s var(--bounce);
      &:hover {
        z-index: 6969;
        scale: 1.5;

        &:nth-child(even) {
          rotate: 2deg;
        }

        &:nth-child(odd) {
          rotate: -2deg;
        }
      }
    }
  }
</style>
<style is:global>
  content .tooltip {
    visibility: hidden;
  }

  content:hover .tooltip {
    visibility: visible;
  }

  body, html {
    overflow-x: hidden;
  }
</style>
